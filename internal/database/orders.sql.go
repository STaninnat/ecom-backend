// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id, user_id, total_amount, status, payment_method,
    external_payment_id, tracking_number, shipping_address,
    contact_phone, created_at, updated_at
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, user_id, total_amount, status, payment_method, external_payment_id, tracking_number, shipping_address, contact_phone, created_at, updated_at
`

type CreateOrderParams struct {
	ID                string
	UserID            string
	TotalAmount       string
	Status            string
	PaymentMethod     sql.NullString
	ExternalPaymentID sql.NullString
	TrackingNumber    sql.NullString
	ShippingAddress   sql.NullString
	ContactPhone      sql.NullString
	CreatedAt         time.Time
	UpdatedAt         time.Time
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.TotalAmount,
		arg.Status,
		arg.PaymentMethod,
		arg.ExternalPaymentID,
		arg.TrackingNumber,
		arg.ShippingAddress,
		arg.ContactPhone,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.ExternalPaymentID,
		&i.TrackingNumber,
		&i.ShippingAddress,
		&i.ContactPhone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderByID = `-- name: DeleteOrderByID :exec
DELETE FROM orders 
WHERE id = $1
`

func (q *Queries) DeleteOrderByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteOrderByID, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, total_amount, status, payment_method, external_payment_id, tracking_number, shipping_address, contact_phone, created_at, updated_at FROM orders 
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.ExternalPaymentID,
		&i.TrackingNumber,
		&i.ShippingAddress,
		&i.ContactPhone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByUserID = `-- name: GetOrderByUserID :many
SELECT id, user_id, total_amount, status, payment_method, external_payment_id, tracking_number, shipping_address, contact_phone, created_at, updated_at FROM orders 
WHERE user_id = $1
`

func (q *Queries) GetOrderByUserID(ctx context.Context, userID string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalAmount,
			&i.Status,
			&i.PaymentMethod,
			&i.ExternalPaymentID,
			&i.TrackingNumber,
			&i.ShippingAddress,
			&i.ContactPhone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllOrders = `-- name: ListAllOrders :many
SELECT id, user_id, total_amount, status, payment_method, external_payment_id, tracking_number, shipping_address, contact_phone, created_at, updated_at FROM orders 
ORDER BY created_at DESC
`

func (q *Queries) ListAllOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalAmount,
			&i.Status,
			&i.PaymentMethod,
			&i.ExternalPaymentID,
			&i.TrackingNumber,
			&i.ShippingAddress,
			&i.ContactPhone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2, updated_at = $3
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID        string
	Status    string
	UpdatedAt time.Time
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
