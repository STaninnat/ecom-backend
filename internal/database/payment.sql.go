// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  id, order_id, user_id, amount, currency, status, provider, provider_payment_id, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, updated_at
`

type CreatePaymentParams struct {
	ID                string
	OrderID           string
	UserID            string
	Amount            string
	Currency          string
	Status            string
	Provider          string
	ProviderPaymentID sql.NullString
	CreatedAt         time.Time
	UpdatedAt         time.Time
}

type CreatePaymentRow struct {
	ID        string
	UpdatedAt time.Time
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (CreatePaymentRow, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.ID,
		arg.OrderID,
		arg.UserID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Provider,
		arg.ProviderPaymentID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreatePaymentRow
	err := row.Scan(&i.ID, &i.UpdatedAt)
	return i, err
}

const getAllPayments = `-- name: GetAllPayments :many
SELECT id, order_id, user_id, amount, currency, status, provider, provider_payment_id, created_at, updated_at
FROM payments
ORDER BY updated_at DESC
`

func (q *Queries) GetAllPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getAllPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Provider,
			&i.ProviderPaymentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT id, order_id, user_id, amount, currency, status, provider, provider_payment_id, created_at, updated_at FROM payments
WHERE order_id = $1
ORDER BY updated_at DESC
LIMIT 1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, orderID string) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Provider,
		&i.ProviderPaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentsByStatus = `-- name: GetPaymentsByStatus :many
SELECT id, order_id, user_id, amount, currency, status, provider, provider_payment_id, created_at, updated_at
FROM payments
WHERE status = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetPaymentsByStatus(ctx context.Context, status string) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Provider,
			&i.ProviderPaymentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentsByUserID = `-- name: GetPaymentsByUserID :many
SELECT id, order_id, user_id, amount, currency, status, provider, provider_payment_id, created_at, updated_at FROM payments
WHERE user_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetPaymentsByUserID(ctx context.Context, userID string) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Provider,
			&i.ProviderPaymentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE payments
SET status = $2, updated_at = $3
WHERE id = $1
`

type UpdatePaymentStatusParams struct {
	ID        string
	Status    string
	UpdatedAt time.Time
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}

const updatePaymentStatusByID = `-- name: UpdatePaymentStatusByID :exec
UPDATE payments
SET status = $2
WHERE id = $1
`

type UpdatePaymentStatusByIDParams struct {
	ID     string
	Status string
}

func (q *Queries) UpdatePaymentStatusByID(ctx context.Context, arg UpdatePaymentStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentStatusByID, arg.ID, arg.Status)
	return err
}

const updatePaymentStatusByProviderPaymentID = `-- name: UpdatePaymentStatusByProviderPaymentID :exec
UPDATE payments
SET status = $2, updated_at = $3
WHERE provider_payment_id = $1
`

type UpdatePaymentStatusByProviderPaymentIDParams struct {
	ProviderPaymentID sql.NullString
	Status            string
	UpdatedAt         time.Time
}

func (q *Queries) UpdatePaymentStatusByProviderPaymentID(ctx context.Context, arg UpdatePaymentStatusByProviderPaymentIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentStatusByProviderPaymentID, arg.ProviderPaymentID, arg.Status, arg.UpdatedAt)
	return err
}
