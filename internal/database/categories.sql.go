// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (id, name, description, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateCategoryParams struct {
	ID          string
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, description, created_at, updated_at FROM categories ORDER BY name
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategories = `-- name: UpdateCategories :exec
UPDATE categories
SET name = $2, description = $3, updated_at = $4
WHERE id = $1
`

type UpdateCategoriesParams struct {
	ID          string
	Name        string
	Description sql.NullString
	UpdatedAt   time.Time
}

func (q *Queries) UpdateCategories(ctx context.Context, arg UpdateCategoriesParams) error {
	_, err := q.db.ExecContext(ctx, updateCategories,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
