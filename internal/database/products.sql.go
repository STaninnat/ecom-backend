// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (id, category_id, name, description, price, stock, image_url, is_active, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateProductParams struct {
	ID          string
	CategoryID  sql.NullString
	Name        string
	Description sql.NullString
	Price       string
	Stock       int32
	ImageUrl    sql.NullString
	IsActive    bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.ImageUrl,
		arg.IsActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteProductByID = `-- name: DeleteProductByID :exec
DELETE FROM products 
WHERE id = $1
`

func (q *Queries) DeleteProductByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProductByID, id)
	return err
}

const filterProducts = `-- name: FilterProducts :many
SELECT id, category_id, name, description, price, stock, image_url, is_active, created_at, updated_at
FROM products
WHERE
    (category_id = $1 OR $1 IS NULL) AND
    (is_active = $2 OR $2 IS NULL) AND
    (price >= $3 OR $3 IS NULL) AND
    (price <= $4 OR $4 IS NULL)
ORDER BY created_at DESC
`

type FilterProductsParams struct {
	CategoryID sql.NullString
	IsActive   sql.NullBool
	MinPrice   sql.NullString
	MaxPrice   sql.NullString
}

func (q *Queries) FilterProducts(ctx context.Context, arg FilterProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, filterProducts,
		arg.CategoryID,
		arg.IsActive,
		arg.MinPrice,
		arg.MaxPrice,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ImageUrl,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActiveProductByID = `-- name: GetActiveProductByID :one
SELECT id, category_id, name, description, price, stock, image_url, is_active, created_at, updated_at
FROM products
WHERE id = $1 AND is_active = TRUE
`

func (q *Queries) GetActiveProductByID(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getActiveProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ImageUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllActiveProducts = `-- name: GetAllActiveProducts :many
SELECT id, category_id, name, description, price, stock, image_url, is_active, created_at, updated_at
FROM products
WHERE is_active = TRUE
ORDER BY updated_at DESC
`

func (q *Queries) GetAllActiveProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ImageUrl,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, category_id, name, description, price, stock, image_url, is_active, created_at, updated_at FROM products 
ORDER BY updated_at DESC
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ImageUrl,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, category_id, name, description, price, stock, image_url, is_active, created_at, updated_at FROM products 
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ImageUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET category_id = $2, name = $3, description = $4, price = $5, stock = $6, image_url = $7, is_active = $8, updated_at = $9
WHERE id = $1
`

type UpdateProductParams struct {
	ID          string
	CategoryID  sql.NullString
	Name        string
	Description sql.NullString
	Price       string
	Stock       int32
	ImageUrl    sql.NullString
	IsActive    bool
	UpdatedAt   time.Time
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.ImageUrl,
		arg.IsActive,
		arg.UpdatedAt,
	)
	return err
}

const updateProductImageURL = `-- name: UpdateProductImageURL :exec
UPDATE products
SET image_url = $2, updated_at = $3
WHERE id = $1
`

type UpdateProductImageURLParams struct {
	ID        string
	ImageUrl  sql.NullString
	UpdatedAt time.Time
}

func (q *Queries) UpdateProductImageURL(ctx context.Context, arg UpdateProductImageURLParams) error {
	_, err := q.db.ExecContext(ctx, updateProductImageURL, arg.ID, arg.ImageUrl, arg.UpdatedAt)
	return err
}

const updateProductStock = `-- name: UpdateProductStock :exec
UPDATE products
SET stock = $2
WHERE id = $1
`

type UpdateProductStockParams struct {
	ID    string
	Stock int32
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) error {
	_, err := q.db.ExecContext(ctx, updateProductStock, arg.ID, arg.Stock)
	return err
}
