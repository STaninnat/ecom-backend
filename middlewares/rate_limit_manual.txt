// --- Reference and study ---
package middlewares

import (
	"net/http"
	"sync"
	"time"
)

// RateLimiterConfig holds configuration for the rate limiter.
type RateLimiterConfig struct {
	Requests int           // Max requests per window
	Window   time.Duration // Window size
}

type clientData struct {
	Requests int
	Expires  time.Time
}

// RateLimiter is a middleware that limits requests per IP.
func RateLimiter(config RateLimiterConfig) func(http.Handler) http.Handler {
	var mu sync.Mutex
	clients := make(map[string]*clientData)

	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			ip := r.RemoteAddr // Note: For production, extract real client IP from headers if behind a proxy.
			mu.Lock()
			data, exists := clients[ip]
			now := time.Now()
			if !exists || now.After(data.Expires) {
				clients[ip] = &clientData{Requests: 1, Expires: now.Add(config.Window)}
				mu.Unlock()
				next.ServeHTTP(w, r)
				return
			}
			if data.Requests >= config.Requests {
				mu.Unlock()
				w.WriteHeader(http.StatusTooManyRequests)
				w.Write([]byte("429 - Too Many Requests. Please try again later."))
				return
			}
			data.Requests++
			mu.Unlock()
			next.ServeHTTP(w, r)
		})
	}
}