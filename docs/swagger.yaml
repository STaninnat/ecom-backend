basePath: /v1
definitions:
  authhandlers.SigninRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  authhandlers.SignupRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  carthandlers.CartItemRequest:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  carthandlers.CartResponse:
    properties:
      message:
        type: string
      order_id:
        type: string
    type: object
  carthandlers.CartUpdateRequest:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  carthandlers.DeleteItemRequest:
    properties:
      product_id:
        type: string
    type: object
  carthandlers.GuestCheckoutRequest:
    properties:
      user_id:
        type: string
    type: object
  handlers.APIResponse:
    properties:
      code:
        type: string
      data: {}
      error:
        type: string
      message:
        type: string
    type: object
  handlers.HandlerResponse:
    properties:
      message:
        type: string
    type: object
  reviewhandlers.PaginatedReviewsResponse:
    properties:
      code:
        type: string
      data: {}
      hasNext:
        type: boolean
      hasPrev:
        type: boolean
      message:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  uploadhandlers.imageUploadResponse:
    properties:
      image_url:
        type: string
      message:
        type: string
    type: object
  userhandlers.PromoteUserRequest:
    properties:
      user_id:
        type: string
    type: object
  userhandlers.UpdateUserRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  userhandlers.UserResponse:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@yourdomain.com
    name: API Support
    url: https://yourdomain.com/support
  description: This is the backend API for the e-commerce platform.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://yourdomain.com/terms/
  title: E-Commerce Backend API
  version: "1.0"
paths:
  /v1/admin/user/promote:
    post:
      consumes:
      - application/json
      description: Promotes a user to admin role (admin only)
      parameters:
      - description: User promotion payload
        in: body
        name: promote
        required: true
        schema:
          $ref: '#/definitions/userhandlers.PromoteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Promote user to admin
      tags:
      - admin
  /v1/auth/google/callback:
    get:
      description: Handles Google OAuth callback and authenticates user
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Google OAuth callback
      tags:
      - auth
  /v1/auth/google/signin:
    get:
      description: Redirects to Google OAuth for authentication
      produces:
      - application/json
      responses:
        "302":
          description: Redirect
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Google OAuth signin
      tags:
      - auth
  /v1/auth/refresh:
    post:
      description: Refreshes access and refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh token
      tags:
      - auth
  /v1/auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns tokens
      parameters:
      - description: Signin payload
        in: body
        name: signin
        required: true
        schema:
          $ref: '#/definitions/authhandlers.SigninRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User signin
      tags:
      - auth
  /v1/auth/signout:
    post:
      description: Logs out the user and revokes tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User signout
      tags:
      - auth
  /v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns tokens
      parameters:
      - description: Signup payload
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/authhandlers.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User signup
      tags:
      - auth
  /v1/cart/:
    delete:
      description: Clears all items from the authenticated user's cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Clear user cart
      tags:
      - cart
  /v1/cart/checkout:
    post:
      description: Checks out the authenticated user's cart and creates an order
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/carthandlers.CartResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Checkout user cart
      tags:
      - cart
  /v1/cart/items:
    delete:
      consumes:
      - application/json
      description: Removes an item from the authenticated user's cart
      parameters:
      - description: Delete item payload
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/carthandlers.DeleteItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Remove item from user cart
      tags:
      - cart
    get:
      description: Retrieves the authenticated user's cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user cart
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Adds an item to the authenticated user's cart
      parameters:
      - description: Cart item payload
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/carthandlers.CartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add item to user cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Updates the quantity of an item in the authenticated user's cart
      parameters:
      - description: Cart update payload
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/carthandlers.CartUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update item quantity in user cart
      tags:
      - cart
  /v1/categories/:
    get:
      description: Retrieves all product categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Creates a new product category
      parameters:
      - description: Category payload
        in: body
        name: category
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Updates an existing product category
      parameters:
      - description: Category payload
        in: body
        name: category
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update category
      tags:
      - categories
  /v1/categories/{id}:
    delete:
      description: Deletes a product category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete category
      tags:
      - categories
  /v1/errorz:
    get:
      description: Returns a simulated error response for testing error handling
      produces:
      - application/json
      responses:
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Error simulation
      tags:
      - infrastructure
  /v1/guest-cart/:
    delete:
      description: Clears all items from the guest cart (session-based)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Clear guest cart
      tags:
      - guest-cart
    get:
      description: Retrieves the guest cart (session-based)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get guest cart
      tags:
      - guest-cart
  /v1/guest-cart/checkout:
    post:
      consumes:
      - application/json
      description: Checks out the guest cart (session-based) and creates an order
      parameters:
      - description: Guest checkout payload
        in: body
        name: checkout
        required: true
        schema:
          $ref: '#/definitions/carthandlers.GuestCheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/carthandlers.CartResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Checkout guest cart
      tags:
      - guest-cart
  /v1/guest-cart/items:
    delete:
      consumes:
      - application/json
      description: Removes an item from the guest cart (session-based)
      parameters:
      - description: Delete item payload
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/carthandlers.DeleteItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Remove item from guest cart
      tags:
      - guest-cart
    post:
      consumes:
      - application/json
      description: Adds an item to the guest cart (session-based)
      parameters:
      - description: Cart item payload
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/carthandlers.CartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add item to guest cart
      tags:
      - guest-cart
    put:
      consumes:
      - application/json
      description: Updates the quantity of an item in the guest cart (session-based)
      parameters:
      - description: Cart update payload
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/carthandlers.CartUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update item quantity in guest cart
      tags:
      - guest-cart
  /v1/health:
    get:
      description: Returns a detailed health status including version and timestamp
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Service health (detailed)
      tags:
      - infrastructure
  /v1/orders/:
    get:
      description: Retrieves all orders (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Creates a new order for the authenticated user
      parameters:
      - description: Order payload
        in: body
        name: order
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create order
      tags:
      - orders
  /v1/orders/{order_id}:
    delete:
      description: Deletes an order by its ID (admin only)
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete order
      tags:
      - orders
    get:
      description: Retrieves a specific order by its ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get order by ID
      tags:
      - orders
  /v1/orders/{order_id}/status:
    put:
      consumes:
      - application/json
      description: Updates the status of an order (admin only)
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      - description: Order status payload
        in: body
        name: status
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update order status
      tags:
      - orders
  /v1/orders/items/{order_id}:
    get:
      description: Retrieves items for a specific order by its ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get order items by order ID
      tags:
      - orders
  /v1/orders/user:
    get:
      description: Retrieves all orders for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user orders
      tags:
      - orders
  /v1/payments/{order_id}:
    get:
      description: Retrieves payment information for a specific order
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get payment by order ID
      tags:
      - payments
  /v1/payments/{order_id}/refund:
    post:
      description: Processes a payment refund for a specific order
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refund payment
      tags:
      - payments
  /v1/payments/admin/{status}:
    get:
      description: Retrieves all payments filtered by status (admin only)
      parameters:
      - description: Payment status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Admin get payments by status
      tags:
      - payments
  /v1/payments/confirm:
    post:
      consumes:
      - application/json
      description: Confirms a payment for an order
      parameters:
      - description: Payment confirmation payload
        in: body
        name: payment
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Confirm payment
      tags:
      - payments
  /v1/payments/history:
    get:
      description: Retrieves payment history for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get payment history
      tags:
      - payments
  /v1/payments/intent:
    post:
      consumes:
      - application/json
      description: Creates a new payment intent for an order
      parameters:
      - description: Payment intent payload
        in: body
        name: payment
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create payment intent
      tags:
      - payments
  /v1/payments/webhook:
    post:
      consumes:
      - application/json
      description: Handles Stripe webhook events
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Stripe webhook
      tags:
      - payments
  /v1/products/:
    get:
      description: Retrieves all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a new product
      parameters:
      - description: Product payload
        in: body
        name: product
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates an existing product
      parameters:
      - description: Product payload
        in: body
        name: product
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update product
      tags:
      - products
  /v1/products/{id}:
    delete:
      description: Deletes a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete product
      tags:
      - products
    get:
      description: Retrieves a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get product by ID
      tags:
      - products
  /v1/products/{id}/image:
    post:
      consumes:
      - multipart/form-data
      description: Updates a product image by product ID (admin only). The backend
        (local filesystem or S3) is selected by server configuration. The API and
        request/response are the same regardless of backend.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/uploadhandlers.imageUploadResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update product image by ID
      tags:
      - products
  /v1/products/filter:
    get:
      consumes:
      - application/json
      description: Filters products based on provided criteria
      parameters:
      - description: Filter payload
        in: body
        name: filter
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Filter products
      tags:
      - products
  /v1/products/upload-image:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a new product image (admin only). The backend (local filesystem
        or S3) is selected by server configuration. The API and request/response are
        the same regardless of backend.
      parameters:
      - description: Product image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/uploadhandlers.imageUploadResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload product image
      tags:
      - products
  /v1/readiness:
    get:
      description: Returns a simple readiness status for health checks and monitoring
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Service readiness
      tags:
      - infrastructure
  /v1/reviews/:
    post:
      consumes:
      - application/json
      description: Creates a new review for a product
      parameters:
      - description: Review payload
        in: body
        name: review
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.APIResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create review
      tags:
      - reviews
  /v1/reviews/{id}:
    delete:
      description: Deletes a review by its ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.APIResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete review by ID
      tags:
      - reviews
    get:
      description: Retrieves a single review by its ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.APIResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get review by ID
      tags:
      - reviews
    put:
      consumes:
      - application/json
      description: Updates an existing review by its ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      - description: Review update payload
        in: body
        name: review
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.APIResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update review by ID
      tags:
      - reviews
  /v1/reviews/product/{product_id}:
    get:
      description: Retrieves paginated, filtered, and sorted reviews for a product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Exact rating filter
        in: query
        name: rating
        type: integer
      - description: Minimum rating filter
        in: query
        name: min_rating
        type: integer
      - description: Maximum rating filter
        in: query
        name: max_rating
        type: integer
      - description: Start date (RFC3339)
        in: query
        name: from
        type: string
      - description: End date (RFC3339)
        in: query
        name: to
        type: string
      - description: Has media filter
        in: query
        name: has_media
        type: boolean
      - description: Sort option
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reviewhandlers.PaginatedReviewsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get reviews by product ID
      tags:
      - reviews
  /v1/reviews/user:
    get:
      description: Retrieves paginated, filtered, and sorted reviews for the authenticated
        user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Exact rating filter
        in: query
        name: rating
        type: integer
      - description: Minimum rating filter
        in: query
        name: min_rating
        type: integer
      - description: Maximum rating filter
        in: query
        name: max_rating
        type: integer
      - description: Start date (RFC3339)
        in: query
        name: from
        type: string
      - description: End date (RFC3339)
        in: query
        name: to
        type: string
      - description: Has media filter
        in: query
        name: has_media
        type: boolean
      - description: Sort option
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reviewhandlers.PaginatedReviewsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get reviews by user
      tags:
      - reviews
  /v1/users/:
    get:
      description: Retrieves the current user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandlers.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get current user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the current user's information
      parameters:
      - description: User update payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userhandlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HandlerResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update current user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
